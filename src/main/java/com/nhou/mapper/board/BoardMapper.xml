<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nhou.mapper.board.BoardMapper">
<!-- 게시글 작성하기 파일 경로 저장을 위해 id값을 갖고오기 위해  useGeneratedKeys, keyProperty 사용 -->
<insert id="insert" useGeneratedKeys="true" keyProperty="boardId">
INSERT INTO board(boardCategory, title, content, member_userId)
VALUES (#{boardCategory}, #{title}, #{content}, #{member_userId})
</insert>

<!-- 파일 첨부 작성 -->
<insert id="insertFile">
INSERT INTO boardFile (board_boardId, boardFileName)
VALUES (#{board_boardId}, #{boardFileName})
</insert>

<!-- 글 목록 list는 mapper에서 사용한 명명 -->
<select id="list" resultType="com.nhou.domain.board.BoardDto">
<!-- <![CDATA[
SELECT 
	b.boardId,
	b.boardCategory,
    b.title,
    IF (
	DATE_FORMAT(b.insertDatetime, '%Y%m%d') < DATE_FORMAT(now(), '%Y%m%d'),
    DATE_FORMAT(b.insertDatetime, '%Y.%m.%d'),
	DATE_FORMAT(b.insertDatetime, '%H:%i')
) AS insertDatetime,
    m.nickName
FROM 
	board b LEFT JOIN member m ON b.member_userId = m.userId
]]> -->
SELECT 
	b.boardId,
	b.boardCategory,
    b.title,
    b.insertDatetime,
    b.member_userId,
    b.viewCount,
    m.nickName,
    COUNT(DISTINCT r.boardReplyId) replyCount,
    COUNT(DISTINCT l.member_userId) likeCount
FROM board b LEFT JOIN member m ON b.member_userId = m.userId
			 LEFT JOIN boardReply r ON b.boardId = r.board_boardId
             LEFT JOIN boardLike l ON b.boardId = l.board_boardId
WHERE
	<if test="category !=null and category != ''">
		b.boardCategory = #{category} AND
	</if>
	(
	<trim prefixOverrides="OR">
		<if test="type == 'all' or type == 'title'">
			b.title LIKE #{keyword}
		</if>
		
		<if test="type == 'all' or type == 'content'">
			OR b.content LIKE #{keyword}
		</if>

		<if test="type == 'all' or type == 'nickName'">
			OR m.nickName LIKE #{keyword}
		</if>
	</trim>
	)
GROUP BY b.boardId
ORDER BY b.boardId DESC
LIMIT #{offset}, #{records}
</select>

<!-- 게시물 총 갯수 -->
<select id="countAll" resultType="int">
SELECT COUNT(*) FROM board
WHERE
	<trim prefixOverrides="OR">
		<if test="type == 'all' or type == 'title'">
			title LIKE #{keyword}
		</if>
		
		<if test="type == 'all' or type == 'content'">
			OR content LIKE #{keyword}
		</if>

		<if test="type == 'all' or type == 'nickName'">
			OR member_userId LIKE #{keyword}
		</if>
	</trim>
</select>

<!-- 게시물 선택해서 보기 select는 mapper에서 사용한 명명 / resultType은 DB에 있는 컬럼들 -->
<!-- resultType은 DB에 있는 컬럼들 -->
<select id="select" resultMap="boardMap">
SELECT
	b.boardId,
	b.boardCategory,
	b.title,
	b.content,
	b.insertDatetime,
	b.member_userId,
	b.viewCount,
	m.nickName,
 	(SELECT COUNT(*) FROM boardLike WHERE board_boardId = b.boardId AND member_userId = #{member_userId}) liked,
 	(SELECT COUNT(*) FROM boardLike WHERE board_boardId = b.boardId) likeCount,
 	f.boardFileName,
 	f.boardFileId
FROM
 	board b LEFT JOIN member m ON b.member_userId = m.userId
 				LEFT JOIN boardFile f ON f.board_boardId = b.boardId
WHERE 
	boardId = #{boardId}
</select>
<resultMap type="com.nhou.domain.board.BoardDto" id="boardMap">
	<id column="boardId" property="boardId"></id>
	<result column="boardCategory" property="boardCategory"/>
	<result column="title" property="title"/>
	<result column="content" property="content"/>
	<result column="boardCategory" property="boardCategory"/>
	<result column="insertDatetime" property="insertDatetime"/>
	<result column="likeCount" property="likeCount"/>
	<result column="viewCount" property="viewCount"/>
	<result column="nickName" property="nickName"/>
	<result column="liked" property="liked"/>
	<result column="member_userId" property="member_userId"/>
	<collection property="boardFileName" ofType="string">
		<result property="boardFileName" column="boardFileName"/>
	</collection>
</resultMap>

<!-- 게시물 수정하기 -->
<update id="update">
UPDATE board
SET 
	boardCategory = #{boardCategory},
	title = #{title},
    content = #{content}
WHERE
	boardId = #{boardId}
</update>

<!-- 게시글 삭제하기 -->
<delete id="delete">
DELETE FROM board
WHERE boardId = #{boardId}
</delete>

<!-- db파일에서 파일첨부 지우기 -->
<delete id="deleteFileByBoardId">
DELETE FROM boardFile
WHERE board_boardId = #{board_boardId}
</delete>

<!-- 실제 저장소에 파일첨부 지우기 -->
<delete id="deleteFileBoardIdAndFileName">
DELETE FROM boardFile
WHERE 
	board_boardId = #{board_boardId}
AND
	boardFileName = #{boardFileName}
</delete>

<!-- 좋아요 존재유무 -->
<select id="getLikeByBoardIdAndUserId" resultType="int">
SELECT COUNT(*) FROM boardLike
WHERE board_boardId = #{board_boardId} AND member_userId = #{member_userId}
</select>

<!-- 좋아요 추가 -->
<insert id="insertLike">
INSERT INTO boardLike (board_boardId, member_userId)
VALUES (#{board_boardId}, #{member_userId})
</insert>

<!-- 좋아요 삭제 -->
<delete id="deleteLike">
DELETE FROM boardLike
WHERE board_boardId = #{board_boardId} AND member_userId = #{member_userId}
</delete>

<!-- 좋아요 카운트 갯수 -->
<select id="countLikeByBoardId" resultType="int">
SELECT COUNT(*) FROM boardLike
WHERE board_boardId = #{board_boardId}
</select>

<!-- 게시글 삭제할때 좋아요 같이 삭제 -->
<delete id="deleteLikeByBoardId">
DELETE FROM boardLike
WHERE board_boardId = #{board_boardId}
</delete>

<!-- 조회수 카운트 -->
<update id="updateViewCount">
UPDATE board
SET viewCount = viewCount + 1
WHERE boardId = #{boardId}
</update>

<!-- 회원탈퇴하면서 좋아요 삭제 -->
<delete id="deleteLikeByMemberId">
DELETE 
FROM 
boardLike 
WHERE member_userId = #{member_userId}
</delete>


</mapper>